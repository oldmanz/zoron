#####################################################################
#  Fan Control
#####################################################################
##  Hotend Fan - XYE board, E1 Connector
[heater_fan hotend_fan]
pin: PB0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0

##  Print Cooling Fan - XYE board, Fan0 Connector
[fan]
pin: PB1
kick_start_time: 0.5
off_below: 0.10

##  Controller fan 
##  Z board, NeoPixel Connector (5V fan PWM)
##  Z board, Y Endstop

[heater_fan controller_fan]
pin: PC8
max_power: 1.0
kick_start_time: 0.5
heater: heater_bed
heater_temp: 45.0

##  Chamber temp / Exhaust fan 
##  XYE board, NeoPixel Connector (24V fan PWM)
##  XYE board, TH1 Connector
##  XYE board, Z Endstop

[thermistor chamber_temp]
temperature1: 25
resistance1: 10000
beta: 3950

[temperature_fan chamber]
pin: PB2
max_power: 1.0
shutdown_speed: 0.0
cycle_time: 0.0005     #2 kHz PWM signal
hardware_pwm: False
sensor_type: chamber_temp
sensor_pin: PC1
min_temp: 0
max_temp: 100
target_temp: 0
max_speed: 1.0
min_speed: 0
control: pid
pid_Kp: 2.0     ;40
pid_Ki: 5.0     ;0.2
pid_Kd: 0.5     ;0.1
pid_deriv_time: 2.0
gcode_id: C
# tachometer_pin: P1.27
# tachometer_ppr: 2

##  Nevermore Micro filter
##  - Z board, E1 Connector

# [fan_generic filter]
# pin: z:P2.4
# kick_start_time: 0.5
# off_below: 0.10

# [temperature_sensor RPi]
# sensor_type: temperature_host
# min_temp: 10
# max_temp: 100
# gcode_id: PI

# ##  Z board, TH1 Connector
# [temperature_sensor endstop]
# sensor_type: NTC 100K beta 3950
# sensor_pin: z:P0.23
# min_temp: 10
# max_temp: 100
# gcode_id: E

## dummy output to get an switch in Mainsail
## any unused mcu pin can be defined you will not connect anything
## as I use the rPi as mcu I will use a pin from it
## Off -> M106 will update fan
## On -> M106 can not uodate fan

[output_pin lock_M106]
pin: rpi: gpio16
value:0

#####################################################################
#  Macros
#####################################################################
# M106 with lock and manual set feature
# M106 S128 M1 will update the fan in any case
[gcode_macro M106]
description: set fan with manual override and lock option
rename_existing: M106.1
gcode:
  # get params and prepare to send them to the base macro
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + params[key])  %}
  {% endfor %}
  {%set manual = params.M|default(0) %}
  {% if printer['output_pin lock_M106'].value|int == 0 or manual == '1' %}
    M106.1 {get_params|join(" ")}
  {% else %}
    {action_respond_info("M106 update is locked")}
  {% endif %}
  
[gcode_macro M141]
description: Set temperature of chamber fan
gcode:
  # set default parameter value
  {% set temp = params.S|default(0) %}
  SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={temp}
    
[gcode_macro _SET_FILTER]
description: Helper: Set Nevermore filter speed
gcode:
  # set default parameter value
  {% set speed = params.S|default(0) %}
  SET_FAN_SPEED FAN=filter SPEED={speed}

##  Filter On
[gcode_macro _FILTER_ON]
description: Helper: Nevermore on
gcode:
  _SET_FILTER S={printer['gcode_macro _USER_VARIABLE'].filter_on}
  
##  Filter Fan Control in Mainsail
[gcode_macro FILTER]
description: Toggle Nevermore fan
gcode:
  {% if printer['fan_generic filter'].speed|float > 0.0 %}
    _SET_FILTER
  {% else %}
    _FILTER_ON
  {% endif %}
  _FILTER_INFO

[delayed_gcode _DELAY_FILTER_OFF]
gcode:
  {% if (printer.idle_timeout.state|lower != "printing") %}
    _SET_FILTER
    _FILTER_INFO
  {% endif %}

##  Chamber Ventilation Control in Mainsail
[gcode_macro VENT]
description: Toggle Chamber fan
gcode:
    {% set act_target = printer['temperature_fan chamber'].target|int %}
    {% set temp_on = printer['gcode_macro _USER_VARIABLE'].vent_on|int %}
    {% if act_target > 0 and act_target <= temp_on %}
        M141
    {% else %}
        M141 S{temp_on}
    {% endif %}
    _VENT_INFO

[delayed_gcode _DELAY_VENT_OFF]
gcode:
  {% if (printer.idle_timeout.state|lower != "printing") %}
    M141
    _VENT_INFO
  {% endif %}

[gcode_macro _VENT_INFO]
description: Helper: Print chamber fan temperature
gcode:
  {% if printer['temperature_fan chamber'].target|int == 0 %}
    {action_respond_info("Chamber fan off")}
  {% else %}
    {action_respond_info("Chamber fan target temp: %2dC" % (printer['temperature_fan chamber'].target))}
  {% endif %}
    
[gcode_macro _FILTER_INFO]
description: Helper: Print Nevermore speed
gcode:
  {% if printer['fan_generic filter'].speed|float > 0.0 %}
    {% set state='on'%}
  {% else %}
    {% set state='off'%}
  {% endif %}
  {action_respond_info("Filter Fan %s" % (state))}
  
#####################################################################
#  Display Menu definition                                          #
#####################################################################
# ##  Disable stock config
# [menu __main __control __fanonoff]
# type: disabled

# [menu __main __control __fanspeed]
# type: disabled

# ## Add menu for fan, chamber and filter
# [menu __main __control __fan]
# type: list
# name: Fan 
# index: 5

# [menu __main __control __fan __partcooling]
# type: list
# enable: {'fan' in printer}
# name: Fan {'%3d' % (printer.fan.speed*100)}%

# [menu __main __control __fan __chamber]
# type: list
# enable: {'temperature_fan chamber' in printer}
# name: Chamber {'%2dC' % (printer['temperature_fan chamber'].target) if printer['temperature_fan chamber'].target else 'OFF'}

# [menu __main __control __fan __filter]
# type: list
# enable: {'fan_generic filter' in printer}
# name: Filter {'%3d' % (printer['fan_generic filter'].speed*100)}%

# [menu __main __control __fan __partcooling __fanonoff]
# type: input
# name: Toggle: {'ON' if menu.input else 'OFF'}
# input: {printer.fan.speed}
# input_min: 0
# input_max: 1
# input_step: 1
# gcode:
#   M106 S{255 if menu.input else 0}

# [menu __main __control __fan __partcooling __fanspeed]
# type: input
# name: Speed: {'%3d' % (menu.input*100)}%
# input: {printer.fan.speed}
# input_min: 0
# input_max: 1
# input_step: 0.01
# gcode:
#   M106 S{'%d' % (menu.input*255)}

# [menu __main __control __fan __chamber __chamberonoff]
# type: input
# name: Toggle: {'ON' if menu.input else 'OFF'}
# input: {printer['temperature_fan chamber'].target}
# input_min: 0
# input_max: 1
# input_step: 1
# gcode:
#   {% set temp_on = printer["gcode_macro _USER_VARIABLE"].vent_on|int %}
#   M141 S{temp_on if menu.input else 0}    
    
# [menu __main __control __fan __chamber __chamberfanspeed]
# type: input
# name: Temp: {'%2dC' % (menu.input) if menu.input else 'OFF'}
# input: {printer['temperature_fan chamber'].target}
# input_min: {printer.configfile.settings['temperature_fan chamber'].min_temp|int}
# input_max: {printer.configfile.settings['temperature_fan chamber'].max_temp|int}
# input_step: 1
# gcode:
#     M141 S{'%d' % (menu.input)}

# [menu __main __control __fan __filter __filteronoff]
# type: input
# name: Toggle: {'ON ' if menu.input else 'OFF'}
# input: {printer['fan_generic filter'].speed}
# input_min: 0
# input_max: 1
# input_step: 1
# gcode:
#  {% if menu.input %}
#    _FILTER_ON
#  {% else %}
#    _SET_FILTER S=0.0
#  {% endif %}

# [menu __main __control __fan __filter __filterspeed]
# type: input
# name: Speed: {'%3d' % (menu.input*100)}%
# input: {printer['fan_generic filter'].speed}
# input_min: 0
# input_max: 1
# input_step: 0.01
# gcode:
#     _SET_FILTER S={menu.input}